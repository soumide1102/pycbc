#!/usr/bin/env python

# Copyright (C) 2018 Ian Harry
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

"""
Plot single-detector qscan of strain data
"""

import sys
import argparse
import logging
import numpy

import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt
from matplotlib.colors import LogNorm

import pycbc.strain
import pycbc.version
import pycbc.results
from pycbc import waveform
from pycbc.waveform import get_td_waveform
from pycbc.detector import Detector

# https://stackoverflow.com/questions/9978880/python-argument-parser-list-of-list-or-tuple-of-tuples
def t_window(s):
    try:
        start, end = map(float, s.split(','))
        return [start, end]
    except:
        raise argparse.ArgumentTypeError("Input must be start,end start,end")

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument("--version", action="version",
                    version=pycbc.version.git_verbose_msg)
parser.add_argument('--output-file', required=True, help='Output plot')
parser.add_argument('--center-time', type=float, required=True,
                    help='Center plot on the given GPS time')
parser.add_argument('--time-windows', required=True, type=t_window,
                    nargs='+',
                    help='Use these set of times for time windows. Should '
                         'be provided as start1,end1 start2,end2 ...')

parser.add_argument('--qtransform-delta-t', default=0.001, type=float,
                    help='The time resolution to interpolate to (optional)')
parser.add_argument('--qtransform-delta-f', default=None, type=float,
                    help='Frequency resolution to interpolate to (optional)')
parser.add_argument('--qtransform-logfsteps', type=int, default=200,
                    help='Do a log interpolation (incompatible with '
                         '--qtransform-delta-f option) and set the number '
                         'of steps to take')
parser.add_argument('--qtransform-frange-lower', default=None, type=float,
                    help='Lower frequency at which to compute qtransform. '
                         'Optional, default=10')
parser.add_argument('--qtransform-frange-upper', default=None, type=float,
                    help='Upper frequency at which to compute qtransform. '
                         'Optional, default=Half of Nyquist')
parser.add_argument('--qtransform-qrange-lower', default=4, type=float,
                    help='Lower limit of the range of q to consider, '
                         'default=4')
parser.add_argument('--qtransform-qrange-upper', default=64, type=float,
                    help='Upper limit of the range of q to consider, '
                         'default=64')
parser.add_argument('--qtransform-mismatch', default=0.2, type=float,
                    help='Mismatch between frequency tiles, default=0.2')

parser.add_argument('--linear-y-axis', dest='log_y', default=True, 
                    action='store_false',
                    help='Use a linear y-axis. By default a log axis is used.')
parser.add_argument('--linear-colorbar', dest='log_colorbar', default=True,
                    action='store_false',
                    help='Use a linear colorbar scale.')
parser.add_argument('--plot-title',
                    help="If given, use this as the plot title")
parser.add_argument('--plot-caption',
                    help="If given, use this as the plot caption")

pycbc.strain.insert_strain_option_group(parser)
opts = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(message)s', level=logging.INFO)

#opts.low_frequency_cutoff = opts.f_low
strain = pycbc.strain.from_cli(opts, pycbc.DYN_RANGE_FAC)

print(opts)


#apx = 'IMRPhenomPv2'
# NOTE: Inclination runs from 0 to pi, with poles at 0 and pi
#       coa_phase runs from 0 to 2 pi.
#hp, hc = get_td_waveform(approximant=apx,
#                         mass1=3.00990180361873,
#                         mass2=3.009420163765797,
#                         spin1x=0.0006443085013513579,
#                         spin1y=0.000243297230969565,
#                         spin1z=-0.000725207741029641,
#                         spin2x=-0.33194459855044706,
#                         spin2y=0.8660742215739932,
#                         spin2z=-0.1806791820319507,
#                         inclination=3.0997017748088034,
#                         delta_t=1.0/4096,
#                         f_lower=20.0)

#det_h1 = Detector('H1')

# Choose a GPS end time, sky location, and polarization phase for the merger
# NOTE: Right ascension and polarization phase runs from 0 to 2pi
#       Declination runs from pi/2. to -pi/2 with the poles at pi/2. and -pi/2.
#end_time = 1180922494.391114
#declination = 0.3570300803497643
#right_ascension = 1.8636095442334946
#polarization = 4.286237468309967

##hp.start_time += end_time
##hc.start_time += end_time

##signal_h1 = det_h1.project_wave(hp, hc,  right_ascension, declination, polarization)

#hp, hc = hp.trim_zeros(), hc.trim_zeros()
#f = waveform.utils.frequency_from_polarizations(hp, hc)
##f.sample_times += end_time


import pycbc

tc = 1180922494.391114
center_time = 1180922494
track_t_badsig, track_f_badsig = pycbc.pnutils.get_inspiral_tf(
            tc - center_time, 3.0099018036187, 3.009420163765797,
            -0.000725207741029641, -0.1806791820319507,20.0,approximant="SEOBNRv4_ROM")

track_t_goodsig, track_f_goodsig = pycbc.pnutils.get_inspiral_tf(
            tc - center_time, 10.17798305364355, 9.315998354446952,
            0.04959056025571386, -0.06430049745701376 ,20.0,approximant="SEOBNRv4_ROM")

if opts.center_time is None:
    center_time = (opts.gps_start_time + opts.gps_end_time) / 2.
else:
    center_time = opts.center_time

if opts.qtransform_frange_upper is None and \
        opts.qtransform_frange_lower is None:
    curr_frange = (30, opts.sample_rate / 4.)
elif opts.qtransform_frange_upper is None or \
        opts.qtransform_frange_lower is None:
    err_msg = 'Must provide either both --qtransfor-frange-upper and '
    err_msg += '--qtransfor-frange-lower or neither option.'
    raise ValueError(err_msg)
else:
    curr_frange = (opts.qtransform_frange_lower, opts.qtransform_frange_upper)

rem_corrupted = True
if (center_time - strain.start_time) < 2 or (strain.end_time - center_time) < 2:
    rem_corrupted = False

strain = strain.whiten(4, 4, remove_corrupted=rem_corrupted)

wins = opts.time_windows
fig, axes = plt.subplots(len(wins),1)
times_all = []
freqs_all = []
qvals_all = []

for curr_idx in range(len(wins)):
    curr_win = wins[curr_idx]
    # Catch the case that not enough data is available.
    if opts.center_time - curr_win[0] < strain.start_time:
        curr_win[0] = float(opts.center_time - strain.start_time - 0.01)
    if opts.center_time + curr_win[1] > strain.end_time:
        curr_win[1] = float(strain.end_time - opts.center_time - 0.01)
    strain_zoom = strain.time_slice(opts.center_time - curr_win[0],
                                    opts.center_time + curr_win[1])

    times, freqs, qvals = strain_zoom.qtransform\
        (delta_t=opts.qtransform_delta_t, delta_f = opts.qtransform_delta_f,
         logfsteps=opts.qtransform_logfsteps, frange=curr_frange,
         qrange=(opts.qtransform_qrange_lower, opts.qtransform_qrange_upper),
         mismatch=opts.qtransform_mismatch)
    times_all.append(times)
    freqs_all.append(freqs)
    qvals_all.append(qvals)

max_qval = max([qvals.max() for qvals in qvals_all])

for curr_idx in range(len(wins)):
    ax = axes[curr_idx]
    times = times_all[curr_idx]
    freqs = freqs_all[curr_idx]
    qvals = qvals_all[curr_idx]
    curr_win = wins[curr_idx]

    norm=None
    if opts.log_colorbar:
        norm=LogNorm(vmin=1, vmax=max_qval)
    #print("numpy.amin(times)", numpy.amin(times))
    #print("numpy.amax(times)", numpy.amax(times))
    #print("numpy.amin(freqs)", numpy.amin(freqs))
    #print("numpy.amax(freqs)", numpy.amax(freqs))
    #print("times", times)
    #print("freqs", freqs)
    ##print("f", f[:])
    ##print("f.sample_times",f.sample_times[:])
    ##print("numpy.amin(f.sample_times)", numpy.amin(abs(f.sample_times)))
    ##print("numpy.amax(f.sample_times)", numpy.amax(abs(f.sample_times)))
    ##print("numpy.amin(f)", numpy.amin(abs(f)))
    ##print("numpy.amax(f)", numpy.amax(abs(f)))
    #numpy.savetxt('h1_imr.txt', numpy.c_[f.sample_times, f])
    im = ax.pcolormesh(times - opts.center_time, freqs, qvals, norm=norm)
    
    ax.plot(track_t_badsig, track_f_badsig, '-', color="red", lw=1)
    ax.plot(track_t_goodsig, track_f_goodsig, '-', color="orange", lw=1)
    #ax.plot(f.sample_times, f, color="red", lw="2")
    ax.set_xlim(-curr_win[0], curr_win[1])
    ax.set_ylim(curr_frange[0], curr_frange[1])
    if opts.log_y:
        ax.set_yscale('log')

# https://stackoverflow.com/questions/6963035/pyplot-axes-labels-for-subplots
fig.add_subplot(111, frameon=False)
plt.tick_params(labelcolor='none', top='off', bottom='off', left='off',
                right='off')
plt.grid(False)
plt.xlabel('Time from {:.3f} (s)'.format(opts.center_time))
plt.ylabel('Frequency (Hz)')

# https://stackoverflow.com/questions/13784201/matplotlib-2-subplots-1-colorbar
cb = fig.colorbar(im, ax=axes.ravel().tolist())
cb.set_label('Normalized power')

if opts.plot_title is None:
    opts.plot_title = 'Q-transform plot around {:.3f}'.format(opts.center_time)
if opts.plot_caption is None:
    # FIXME: Someone please improve!
    opts.plot_caption = ("This shows the Q-transform as a function of time and "
                        "frequency")

pycbc.results.save_fig_with_metadata\
    (fig, opts.output_file, cmd=' '.join(sys.argv), fig_kwds={'dpi': 150},
     title=opts.plot_title, caption=opts.plot_caption)
